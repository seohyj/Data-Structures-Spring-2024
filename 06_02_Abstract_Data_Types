{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"121f0BPgTaO3Nk_ImwHtcqgpU6ZInXLdv","timestamp":1710824957148}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!python --version"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BCoaYMqlhGnu","executionInfo":{"status":"ok","timestamp":1710821911113,"user_tz":-540,"elapsed":458,"user":{"displayName":"ACSL GIST","userId":"03860034063650818740"}},"outputId":"91386b0e-b069-4a07-890c-023f21671182"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Python 3.10.12\n"]}]},{"cell_type":"markdown","source":["## First implementation"],"metadata":{"id":"Ox-V0KfB7ymx"}},{"cell_type":"markdown","source":["Conventional representation: 3 numbers => y, m, d\n","Date 1: 2020 / 03 / 19\n","Date 2: 2021 / 03 / 19\n","\n","Julian representation: 1 number\n","2020 / 03 / 31 => 12345\n","2020 / 04 / 01 => 12345 + 1\n","0-th day of Julian representation: November 24, 4714 BC"],"metadata":{"id":"P5jTQEUI8W84"}},{"cell_type":"code","source":["class Date:\n","    def __init__(self, year, month, day):\n","        # encapsulation. semiprivate attribute\n","        self._year = year\n","        self._month = month\n","        self._day = day\n","\n","    def year(self):\n","        return self._year\n","\n","    def month(self):\n","        return self._month\n","\n","    def day(self):\n","        return self._day\n","\n","    def day_of_week(self):\n","        jday = self._to_jday()\n","        return jday % 7\n","\n","    def _to_jday(self):\n","        tmp = 0\n","        if self._month < 3:\n","            tmp = -1\n","        return (self._day - 32075 +\n","            (1461 * (self._year + 4800 + tmp) // 4) +\n","            (367 * (self._month - 2 - tmp * 12) // 12) -\n","            (3 * ((self._year + 4900 + tmp) // 100) // 4))\n","\n","    def num_days(self, other_date):\n","        return other_date._to_jday() - self._to_jday()\n","\n","    def advance_by(self, days):\n","        jday = self._to_jday() + days\n","        y, m, d = self._jday_to_ymd(jday)\n","        return Date(y, m, d)\n","\n","    @staticmethod  # decorator\n","    def _jday_to_ymd(jday):\n","        A = jday + 68569\n","        B = 4 * A // 146097\n","        A = A - (146097 * B + 3) // 4\n","        year = 4000 * (A + 1) // 1461001\n","        A = A - (1461 * year // 4) + 31\n","        month = 80 * A // 2447\n","        day = A - (2447 * month // 80)\n","        A = month // 11\n","        month = month + 2 - (12 * A)\n","        year = 100 * (B - 49) + year + A\n","        return year, month, day\n","\n","    def __str__(self):\n","        return \"%04d/%02d/%02d\" % (self._year, self._month, self._day)\n","\n","    def __eq__(self, rhs):\n","        return (self._year == rhs._year) and (self._month == rhs._month) and (self._day == rhs._day)\n","\n","    def __lt__(self, rhs):\n","        pass\n","\n","    def __le__(self, rhs):\n","        pass"],"metadata":{"id":"wXHujiFW7vDe","executionInfo":{"status":"ok","timestamp":1712935220430,"user_tz":-540,"elapsed":436,"user":{"displayName":"주서현","userId":"15395499545331143366"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["d1 = Date(2023, 3, 50)\n","d2 = Date(2023, 3, 19)"],"metadata":{"id":"8GsaCGFC7xRQ","executionInfo":{"status":"ok","timestamp":1712935226162,"user_tz":-540,"elapsed":484,"user":{"displayName":"주서현","userId":"15395499545331143366"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["print(d1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"baoPvxHr4-0F","executionInfo":{"status":"ok","timestamp":1712935230363,"user_tz":-540,"elapsed":2,"user":{"displayName":"주서현","userId":"15395499545331143366"}},"outputId":"b203db53-920f-48e2-f67e-a55ca669203a"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["2023/03/50\n"]}]},{"cell_type":"code","source":["print(d1.num_days(d2))\n","print(d1.month())\n","print(d1.day_of_week())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QqIVti74-ZK1","executionInfo":{"status":"ok","timestamp":1710822726931,"user_tz":-540,"elapsed":3,"user":{"displayName":"ACSL GIST","userId":"03860034063650818740"}},"outputId":"616b688a-29f7-4411-a6d7-54ecbfcfbed0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["11\n","3\n","6\n"]}]},{"cell_type":"markdown","source":["## Alternative implementation"],"metadata":{"id":"1DL0aVGt-9sP"}},{"cell_type":"code","source":["# Social Media\n","# Millions of users"],"metadata":{"id":"PnjPfcUB-sy6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Date:\n","    def __init__(self, year, month, day):\n","        # encapsulation\n","        # self._year = year\n","        # self._month = month\n","        # self._day = day\n","        self._jday = self._to_jday(year, month, day)\n","        # 3 integers / user\n","        # 1 integer / user\n","\n","    def year(self):\n","        # return self._year\n","        return self._jday_to_ymd(self._to_jday)[0]\n","\n","    def month(self):\n","        # return self._month\n","        return self._jday_to_ymd(self._to_jday)[1]\n","\n","    def day(self):\n","        # return self._day\n","        return self._jday_to_ymd(self._to_jday)[2]\n","\n","    def day_of_week(self):\n","        # jday = self._to_jday()\n","        # return jday % 7\n","        return self._jday % 7\n","\n","    def _to_jday(self):\n","        tmp = 0\n","        if self._month < 3:\n","            tmp = -1\n","        return (self._day - 32075 +\n","            (1461 * (self._year + 4800 + tmp) // 4) +\n","            (367 * (self._month - 2 - tmp * 12) // 12) -\n","            (3 * ((self._year + 4900 + tmp) // 100) // 4))\n","\n","    def num_days(self, other_date):\n","        # return other_date._to_jday() - self._to_jday()\n","        return other_date._jday - self._jday\n","\n","    def advance_by(self, days):\n","        # jday = self._to_jday() + days\n","        jday = self._jday + days\n","        y, m, d = self._jday_to_ymd(jday)\n","        return Date(y, m, d)\n","\n","    @staticmethod  # decorator\n","    def _jday_to_ymd(jday):\n","        A = jday + 68569\n","        B = 4 * A // 146097\n","        A = A - (146097 * B + 3) // 4\n","        year = 4000 * (A + 1) // 1461001\n","        A = A - (1461 * year // 4) + 31\n","        month = 80 * A // 2447\n","        day = A - (2447 * month // 80)\n","        A = month // 11\n","        month = month + 2 - (12 * A)\n","        year = 100 * (B - 49) + year + A\n","        return year, month, day"],"metadata":{"id":"-4vt5Wl6_LDa","executionInfo":{"status":"ok","timestamp":1712934655114,"user_tz":-540,"elapsed":2,"user":{"displayName":"주서현","userId":"15395499545331143366"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["## More excpetions"],"metadata":{"id":"nzDnjXSsEeL7"}},{"cell_type":"code","source":["a = 3\n","a // 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"B_dvu2UnEfhd","executionInfo":{"status":"error","timestamp":1710824229899,"user_tz":-540,"elapsed":13,"user":{"displayName":"ACSL GIST","userId":"03860034063650818740"}},"outputId":"913e51ab-0df0-4bab-9fec-6ef5609829f6"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ZeroDivisionError","evalue":"integer division or modulo by zero","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-4e1d1ba6a678>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m//\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m: integer division or modulo by zero"]}]},{"cell_type":"code","source":["s = 'abc'\n","b = int(s)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"MWXiAutMEglJ","executionInfo":{"status":"error","timestamp":1710824240993,"user_tz":-540,"elapsed":5,"user":{"displayName":"ACSL GIST","userId":"03860034063650818740"}},"outputId":"5678c0d6-3099-4628-b81d-ef08c7daf9a4"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"invalid literal for int() with base 10: 'abc'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-60a9feffceaa>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'abc'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'abc'"]}]},{"cell_type":"code","source":["data = [ None ] * 10000000000000000"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":144},"id":"26iarqlvEjJB","executionInfo":{"status":"error","timestamp":1710824264631,"user_tz":-540,"elapsed":3,"user":{"displayName":"ACSL GIST","userId":"03860034063650818740"}},"outputId":"a57c684b-ba5b-4716-81bf-f5c0cbb934e5"},"execution_count":null,"outputs":[{"output_type":"error","ename":"MemoryError","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mMemoryError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-a16fc4adcd78>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m10000000000000000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mMemoryError\u001b[0m: "]}]},{"cell_type":"code","source":["s = input(\"Enter an integer> \")\n","try:\n","    x = int(s)\n","    print(\"You said: %g\" % x)\n","    print(\"bababa\")\n","    print(\"bbb\")\n","except ValueError:\n","    print(\"%s is not a number\" % s)"],"metadata":{"id":"0oK9tn-dEpFg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class MyErrorRandom(Exception):\n","    def __init__(self):\n","        super().__init__('custom error msg')\n","\n","def main():\n","    try:\n","        x = int(input(\"I;ll raise an error\"))\n","        raise ValueError\n","    except MyErrorRandom as e:\n","        print(\"error occured\", e)\n","\n","main()"],"metadata":{"id":"HGDw2ZhbFLPJ"},"execution_count":null,"outputs":[]}]}